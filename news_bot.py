import feedparser
import telegram
from datetime import datetime, timedelta
from bs4 import BeautifulSoup
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, JobQueue
import re
import os
import json
import time
import threading

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
TELEGRAM_TOKEN = os.getenv("7850099140:AAHFALV-Ed5tkKLqgoIQakItcxkE7_HYRdk")
YOUR_CHAT_ID = int(os.getenv("58354833"))

# –†—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–µ RSS-—Ñ–∏–¥—ã –ø–æ —Ç–µ–º–µ –ò–ò –∏ —É–º–Ω—ã–π –¥–æ–º
RSS_FEEDS = [
    'https://habr.com/ru/rss/hub/machine_learning/ ',
    'https://habr.com/ru/rss/hub/smart_home/ ',
    'https://vc.ru/feed ',
    'https://www.3dnews.ru/software-news/feed/ ',
    'https://www.ixbt.com/news.rss ',
    'https://ain.ua/feed/ ',
    'https://www.cnews.ru/inc/rss/news_all_full.asp ',
    'https://rssexport.rbc.ru/rbcnews/news/technology.rss ',
]

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
SENT_NEWS_FILE = 'sent_news.json'

# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===
def get_week_ago():
    return datetime.now() - timedelta(days=7)

def is_russian_text(text):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–º"""
    if not text:
        return False
    cyrillic_chars = sum(1 for c in text if '\u0400' <= c <= '\u04FF')
    return cyrillic_chars / len(text) > 0.5 if len(text) > 0 else False

def clean_html(text):
    """–û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö HTML-—Ç–µ–≥–æ–≤ –∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ."""
    if not text:
        return ''

    allowed_tags = ['<b>', '</b>', '<i>', '</i>', '<a>', '</a>', '<code>', '</code>', '<pre>', '</pre>', '<u>', '</u>', '<s>', '</s>']
    cleaned_text = text

    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–µ–≥–∏, –∫—Ä–æ–º–µ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö
    for tag in re.findall(r'<[^>]+>', text):
        if tag not in allowed_tags:
            cleaned_text = cleaned_text.replace(tag, '')

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ —Ç–µ–≥–∏
    open_tags = {
        '<b>': '</b>',
        '<i>': '</i>',
        '<u>': '</u>',
        '<s>': '</s>',
        '<code>': '</code>',
        '<pre>': '</pre>'
    }

    for tag, closing_tag in open_tags.items():
        if cleaned_text.count(tag) > cleaned_text.count(closing_tag):
            cleaned_text += closing_tag

    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    cleaned_text = re.sub(r'\s+', ' ', cleaned_text).strip()
    return cleaned_text

def load_sent_news():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –∏–∑ —Ñ–∞–π–ª–∞"""
    if os.path.exists(SENT_NEWS_FILE):
        with open(SENT_NEWS_FILE, 'r', encoding='utf-8') as f:
            try:
                return set(json.load(f))
            except json.JSONDecodeError:
                return set()
    return set()

def save_sent_news(sent_links):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –≤ —Ñ–∞–π–ª"""
    with open(SENT_NEWS_FILE, 'w', encoding='utf-8') as f:
        json.dump(list(sent_links), f, ensure_ascii=False, indent=2)

# === –ü–∞—Ä—Å–µ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π ===
def fetch_news(sent_links):
    news = []
    week_ago = get_week_ago()
    for url in RSS_FEEDS:
        try:
            feed = feedparser.parse(url)
            for entry in feed.entries:
                try:
                    published_time = datetime(*entry.published_parsed[:6])
                    if published_time < week_ago:
                        continue  # –°—Ç–∞—Ä—à–µ –Ω–µ–¥–µ–ª–∏

                    title = entry.title
                    if not is_russian_text(title):
                        continue  # –ù–µ —Ä—É—Å—Å–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫

                    link = entry.link
                    if link in sent_links:
                        continue  # –£–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ —ç—Ç—É –Ω–æ–≤–æ—Å—Ç—å

                    summary = entry.get('summary', '')[:200] + '...' if entry.get('summary') else ''

                    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    image_url = None
                    if hasattr(entry, 'media_content') and len(entry.media_content) > 0:
                        image_url = entry.media_content[0]['url']
                    elif hasattr(entry, 'enclosures') and len(entry.enclosures) > 0:
                        image_url = entry.enclosures[0].get('href')
                    elif 'summary_detail' in entry and 'value' in entry.summary_detail:
                        soup = BeautifulSoup(entry.summary_detail.value, 'html.parser')
                        img_tag = soup.find('img')
                        if img_tag:
                            image_url = img_tag.get('src')

                    news.append({
                        'title': title,
                        'link': link,
                        'summary': summary,
                        'image': image_url,
                        'published': published_time.strftime('%Y-%m-%d %H:%M')
                    })
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø–∏—Å–∏: {e}")
                    continue
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ñ–∏–¥–∞ {url}: {e}")
    return news

# === –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ —Å–≤–µ–∂–∏–µ —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø—Ä–æ –ò–ò –∏ —É–º–Ω—ã–π –¥–æ–º.")

async def send_news(context: ContextTypes.DEFAULT_TYPE):
    bot = context.bot
    sent_links = load_sent_news()

    news = fetch_news(sent_links)
    if not news:
        await bot.send_message(chat_id=YOUR_CHAT_ID, text="–ù–æ–≤–æ—Å—Ç–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    for article in news:
        cleaned_summary = clean_html(article['summary'])

        message_text = f"""
üóû <b>{article['title']}</b>
üïí {article['published']}
üìù {cleaned_summary}
üîó <a href='{article['link']}'>–ß–∏—Ç–∞—Ç—å –¥–∞–ª–µ–µ</a>
"""

        try:
            if article['image']:
                try:
                    await bot.send_photo(
                        chat_id=YOUR_CHAT_ID,
                        photo=article['image'],
                        caption=message_text,
                        parse_mode='HTML'
                    )
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
                    await bot.send_message(
                        chat_id=YOUR_CHAT_ID,
                        text=message_text,
                        parse_mode='HTML',
                        disable_web_page_preview=True
                    )
            else:
                await bot.send_message(
                    chat_id=YOUR_CHAT_ID,
                    text=message_text,
                    parse_mode='HTML',
                    disable_web_page_preview=True
                )

            sent_links.add(article['link'])
            save_sent_news(sent_links)
            time.sleep(2)

        except telegram.error.BadRequest as e:
            print(f"–û—à–∏–±–∫–∞ Telegram API: {e}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–æ–≤–æ—Å—Ç—å.")
            continue

# === Flask —Å–µ—Ä–≤–µ—Ä –¥–ª—è UptimeRobot ===
from flask import Flask

def start_web_server():
    app = Flask(__name__)

    @app.route('/')
    def home():
        return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!", 200

    app.run(host='0.0.0.0', port=int(os.getenv("PORT", 8080)))

# === –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ ===
async def run_bot():
    if not TELEGRAM_TOKEN or not YOUR_CHAT_ID:
        print("‚ùå TELEGRAM_TOKEN –∏–ª–∏ YOUR_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω—ã!")
        return

    application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    application.add_handler(CommandHandler("start", start))

    job_queue = application.job_queue
    job_queue.run_repeating(send_news, interval=3600, first=10)

    print("üîÑ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await application.initialize()
    await application.start()
    await application.updater.start_polling()

# === –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ===
if __name__ == '__main__':
    if not os.getenv("TELEGRAM_TOKEN") or not os.getenv("YOUR_CHAT_ID"):
        print("‚ùå TELEGRAM_TOKEN –∏–ª–∏ YOUR_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω—ã –≤ Secret!")
    else:
        # –ó–∞–ø—É—Å–∫ Flask-—Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        web_thread = threading.Thread(target=start_web_server)
        web_thread.daemon = True
        web_thread.start()

        # –ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞
        import asyncio

        asyncio.run(run_bot())
